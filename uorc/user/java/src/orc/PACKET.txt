===========================================
host to orc command packet
-------------------------------------------
offset		length		description
-------------------------------------------
0		4		uOrc signature/version 0x0ced0002

4		4		transaction id (sequentially allocated by sender)

8		8		local time (microseconds)

16              4               command id

20		...		<command data>

===========================================
orc to host packet
-------------------------------------------
offset		length		description
-------------------------------------------
0		4		uOrc signature/version 0x0ced0001

4		4		transaction id (echoing the sender's id, or 0 
				if the message was spontaneously generated by 
				the uorc. hosts should thus NOT use id 0.)

8		8		local time (microseconds)

16              4               response id

20		...		<response stream>

===========================================
State Request (command id = 0x0001)
-------------------------------------------
offset		length		description
-------------------------------------------
0		4		status flags

4		2               debug stream chars waiting

6		4		analog 0
		4		analog 1
		4		analog 2
		4		analog 3
		4		analog 4
		4		analog 5
		4		analog 6
		4		analog 7
		4		analog 8  (motcur 0)
		4		analog 9  (motcur 1)
		4		analog 10 (motcur 2)
		4               analog 11 (batt volt sense)
		4               analog 12 (MCU temperature)

		4		"dumb" digital I/O pin values
		4		"dumb" digital I/O direction

		2		motor pwm 0
		2		motor pwm 1
		2		motor pwm 2

		4		quad phase 0 position
		4		quad phase 0 velocity (ticks per usec)
		4		quad phase 1 position
		4		quad phase 1 velocity (ticks per usec)

		1		fancy I/O pin 0 mode
		4		fancy I/O pin 0 data
		1		fancy I/O pin 1 mode
		4		fancy I/O pin 1 data
		1		fancy I/O pin 2 mode
		4		fancy I/O pin 2 data
		1		fancy I/O pin 3 mode
		4		fancy I/O pin 3 data
		1		fancy I/O pin 4 mode
		4		fancy I/O pin 4 data
		1		fancy I/O pin 5 mode
		4		fancy I/O pin 5 data
		1		fancy I/O pin 6 mode
		4		fancy I/O pin 6 data
		1		fancy I/O pin 7 mode
		4		fancy I/O pin 7 data

==========================================
Motor PWM Set (command = 0x0100)

-------------------------------------------
offset		length		description
-------------------------------------------
		1		Motor 0 flags (b0: direction, b7: cmd enable)
		2		Motor 0 PWM
		2		Motor 0 Slew rate
		1		Motor 1 flags (b0: direction, b7: cmd enable)
		2		Motor 1 PWM
		2		Motor 1 Slew rate
		1		Motor 2 flags (b0: direction, b7: cmd enable)
		2		Motor 2 PWM
		2		Motor 2 Slew rate

==========================================
Reliable communications scheme

Reliable communications are managed by the host: the host sends a
command and waits for a response. If the response is not received, it
retransmits *the exact same message* until a response IS received. The
uOrc board remembers the last response it sent: if it receives a
duplicate command, it will resend the last response. This protocol
ensures that commands are executed only once, even if multiple
retransmissions are required, and regardless of where packet loss
might occur.

The host is responsible for establishing a reasonble retransmission
timeout. This timeout can be "learned" by modelling the RTT, or more
commonly, simply fixing it to about 2ms. (2ms is an eterinity on a
dedicated LAN, which is what the uOrc is designed for.)

