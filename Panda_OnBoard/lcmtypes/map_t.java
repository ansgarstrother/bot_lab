/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public byte numTriangles;
    public byte numBarriers;
    public double barriers[][];
    public double triangles[][];
 
    public map_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x301c3c3653e78b6fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.map_t.class))
            return 0L;
 
        classes.add(lcmtypes.map_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte(this.numTriangles); 
 
        outs.writeByte(this.numBarriers); 
 
        for (int a = 0; a < this.numBarriers; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.barriers[a][b]); 
            }
        }
 
        for (int a = 0; a < this.numTriangles; a++) {
            for (int b = 0; b < 2; b++) {
                outs.writeDouble(this.triangles[a][b]); 
            }
        }
 
    }
 
    public map_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.map_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.map_t o = new lcmtypes.map_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.numTriangles = ins.readByte();
 
        this.numBarriers = ins.readByte();
 
        this.barriers = new double[(int) numBarriers][(int) 4];
        for (int a = 0; a < this.numBarriers; a++) {
            for (int b = 0; b < 4; b++) {
                this.barriers[a][b] = ins.readDouble();
            }
        }
 
        this.triangles = new double[(int) numTriangles][(int) 2];
        for (int a = 0; a < this.numTriangles; a++) {
            for (int b = 0; b < 2; b++) {
                this.triangles[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public lcmtypes.map_t copy()
    {
        lcmtypes.map_t outobj = new lcmtypes.map_t();
        outobj.timestamp = this.timestamp;
 
        outobj.numTriangles = this.numTriangles;
 
        outobj.numBarriers = this.numBarriers;
 
        outobj.barriers = new double[(int) numBarriers][(int) 4];
        for (int a = 0; a < this.numBarriers; a++) {
            System.arraycopy(this.barriers[a], 0, outobj.barriers[a], 0, 4);        }
 
        outobj.triangles = new double[(int) numTriangles][(int) 2];
        for (int a = 0; a < this.numTriangles; a++) {
            System.arraycopy(this.triangles[a], 0, outobj.triangles[a], 0, 2);        }
 
        return outobj;
    }
 
}

